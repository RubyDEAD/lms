union RenewLoanResult = BorrowRecord | RenewalError

type Query {
  getBooks: [Book!]!
  getBookById(id: String!): Book
  getBookCopiesById(id: String!): [Book_copies!]!
  searchBooks(query:String!):[Book!]!
  getAvailbleBookCopyByID(id:String!):Book_copies!

  getPatronById(patron_id: ID!): Patron
  getAllPatrons: [Patron]

  getPatronStatusByType(patron_status: Status!): [PatronStatus]

  borrowRecords(
    patronId: ID # NEW: Filter by patron
    bookId: ID   # NEW: Filter by book
    status: BorrowStatus # NEW: Filter by status
  ): [BorrowRecord!]!
  
  reservations(
    patronId: ID
    bookId: ID
    status: ReservationStatus
  ): [Reservation!]!
  
  overdueRecords: [BorrowRecord!]!
  patronBorrowHistory(patronId: ID!): [BorrowRecord!]! # NEW

  # Borrowing operations
  borrowBook(bookId: ID!, patronId: ID!): BorrowRecord!
  returnBook(recordId: ID!): BorrowRecord!
  renewLoan(recordId: ID!): RenewLoanResult! # CHANGED: Better return type
  
  # Reservation operations
  reserveBook(bookId: ID!, patronId: ID!): Reservation!
  cancelReservation(id: ID!): Boolean!
  fulfillReservation(id: ID!): Reservation! # NEW: When reservation becomes a loan

  checkActiveBorrow(bookId: ID!, patronId: ID!): BorrowRecord
  checkActiveReserve(bookId: ID!, patronId: ID!): Reservation

  getFine(fine_id: ID!): Fine
  listFines: [Fine!]!
  getViolationRecord(violation_record_id: ID!): ViolationRecord
  listViolationRecords: [ViolationRecord!]!

}

type Mutation {
  addBook(title: String!, authorName: String!, datePublished: String!, description: String! , image: String): Book!
  addBCopy(book_id:String!):Book_copies!
  updateBook(id:ID!,title:String!, author_name:String, datePublished:String,description:String):Book!
  updateBookCopyStatus(id:ID!, book_status:String):Book_copies!
  deleteBCopy(id:ID!):Boolean!
  deleteBook(id:ID!):Boolean!
  
  createPatron(first_name: String!, last_name: String!, phone_number: String! email: String!, password: String!): Patron
  updatePatron(patron_id: ID!, first_name: String, last_name: String, phone_number: String): Patron
  deletePatronById(patron_id: ID!): Patron

  updatePatronStatus(patron_id: ID!, warning_count: Int, unpaid_fees: Float, patron_status: Status): PatronStatus

  
  
  #
  borrowBook(bookId: ID!, patronId: ID!): BorrowRecord!
  returnBook(recordId: ID!): BorrowRecord!
  renewLoan(recordId: ID!): RenewLoanResult! # CHANGED: Better return type
  
  reserveBook(bookId: ID!, patronId: ID!): Reservation!
  cancelReservation(id: ID!): Boolean!
  fulfillReservation(id: ID!): Reservation! # NEW: When reservation becomes a loan
  #

    createFine(patronId: ID!, bookId: ID!, ratePerDay: Float!, violationType: ViolationType!,daysLate: Int): Fine!
  updateFine(fine_id: ID!, daysLate: Int!, ratePerDay: Float!): Fine!
  deleteFine(fine_id: ID!): Boolean!

  createViolationRecord(patron_id: ID!, violation_type: ViolationType!, violation_info: String!): ViolationRecord!
  updateViolationStatus(violation_record_id: ID!, violation_status: ViolationStatus!): ViolationRecord!
  deleteViolationRecord(violation_record_id: ID!): Boolean!

}

type Subscription {
  bookAdded: Book!
  patronCreated: Patron
  patronStatusUpdated: PatronStatus
  reservationCreated: Reservation!
  borrowRecordUpdated: BorrowRecord!
   fineCreated: Fine!
  violationRecordCreated: ViolationRecord!
}

type Book {
  id: String!
  title: String!
  author_name: String!
  date_published: String! # ISO 8601 format (YYYY-MM-DD)
  description: String!
  image: String
}

type Author {
  id: Int!
  author_name: String!
}

type Book_copies {
  id:ID!
  book_id: String!
  title: String!
  author_name: String!
  date_published: String! # ISO 8601 format (YYYY-MM-DD)
  description: String!
  book_status:String!
}

type Patron {
  patron_id: ID!
  first_name: String!
  last_name: String!
  phone_number: String!
  patron_created: String!
  status: PatronStatus
}


type PatronStatus {
  patron_id: ID!
  warning_count: Int!
  patron_status: Status!
  unpaid_fees: Float!
}

enum Status {
  Good
  Warned
  Banned
  Pending
}




type BorrowRecord {
  id: ID!
  bookId: ID!
  patronId: ID!
  borrowedAt: String!
  dueDate: String!
  returnedAt: String
  renewalCount: Int!
  previousDueDate: String
  status: BorrowStatus! # NEW: Helps track loan state
  bookCopyId: Int!
}

type Reservation {
  id: ID!
  bookId: ID!
  patronId: ID!
  reservedAt: String!
  expiresAt: String!
  status: ReservationStatus! # NEW: Tracks reservation lifecycle
}

enum BorrowStatus {
  ACTIVE
  RETURNED
  OVERDUE
  RENEWED
}

enum ReservationStatus {
  PENDING
  FULFILLED
  CANCELLED
  EXPIRED
}


type RenewalError {
  code: RenewalErrorCode!
  message: String!
}

enum RenewalErrorCode {
  MAX_RENEWALS_REACHED
  ITEM_RESERVED
  PATRON_BLOCKED
  LOAN_NOT_FOUND
  LOAN_ALREADY_RETURNED
}

type Fine {
  fine_id: ID!
  patronId: ID!
  bookId: ID!
  daysLate: Int!
  ratePerDay: Float!
  amount: Float!
  createdAt: String!
  violationRecordId: ID!
}

enum ViolationStatus {
  Ongoing
  Resolved
}

enum ViolationType {
  Late_Return
  Unpaid_Fees
  Damaged_Book
}

type ViolationRecord {
  violation_record_id: ID!
  patron_id: ID!
  violation_type: ViolationType!
  violation_info: String!
  violation_created: String!
  violation_status: ViolationStatus!
}











